// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty;

  module.exports = function(app, events, config) {
    var Url, consumer, consumerUrl, get, provider, redirect, store, storeAuth, trace;
    trace = config.trace, consumer = config.consumer, provider = config.provider;
    consumerUrl = function() {
      return consumer.url.replace("{port}", app.address().port);
    };
    store = function(req, key, value) {
      var ns;
      ns = req.session.oauth ? req.session.oauth : req.session.oauth = {};
      if (typeof key === "function") {
        return key.call(ns);
      } else {
        if (value != null) {
          ns[key] = value;
        } else if (value === null) {
          delete ns[key];
        }
        return ns[key];
      }
    };
    storeAuth = function(req, json) {
      return store(req, function() {
        var k, v;
        for (k in json) {
          if (!__hasProp.call(json, k)) continue;
          v = json[k];
          this[k] = v;
        }
        this.authenticated = true;
        return this.expires_time = Date.now() + (parseInt(json.expires_in) * 1000);
      });
    };
    get = function(reason, url, done, fail) {
      var next, options, parts, secure, transport;
      parts = url.parse();
      secure = parts.protocol === "https:";
      transport = secure ? require("https") : require("http");
      options = {
        host: parts.host,
        port: parts.port || (secure ? 443 : 80),
        path: parts.pathname + parts.search,
        headers: {
          "Accept": "application/json",
          "X-Route": provider.route
        }
      };
      next = function(ores) {
        var body, json;
        body = "";
        json = null;
        ores.on("data", function(chunk) {
          return body = body + chunk;
        });
        return ores.on("end", function() {
          try {
            if (body) {
              json = JSON.parse(body);
            }
            if (ores.statusCode === 200) {
              if (trace) {
                console.log("OAuth2:" + reason + " -> RESPONSE");
                console.log(json);
              }
              return done(json);
            } else {
              return fail((json != null ? json.error_description : void 0) ? json.error_description : body ? body : ores.statusCode);
            }
          } catch (ex) {
            return fail(ex);
          }
        });
      };
      if (trace) {
        console.log("OAuth2:" + reason + " -> GET " + (url.toString()));
      }
      return transport.get(options, next).on("error", fail);
    };
    redirect = function(reason, res, url) {
      if (trace) {
        console.log("OAuth2:" + reason + " -> REDIRECT " + (url.toString()));
      }
      return res.redirect(url.toString(), 303);
    };
    Url = (function() {

      Url.name = 'Url';

      function Url(base, path, params) {
        this.base = base;
        this.path = path;
        this.params = params;
      }

      Url.prototype.parse = function() {
        return require("url").parse(this.toString());
      };

      Url.prototype.toString = function() {
        var k, v;
        return "" + this.base + this.path + "?" + (((function() {
          var _ref, _results;
          _ref = this.params;
          _results = [];
          for (k in _ref) {
            if (!__hasProp.call(_ref, k)) continue;
            v = _ref[k];
            _results.push(k + "=" + encodeURIComponent(v));
          }
          return _results;
        }).call(this)).join("&"));
      };

      return Url;

    })();
    app.get(consumer.routes.connect, function(req, res) {
      var hash, url;
      store(req, "host", provider.url);
      hash = require("crypto").createHash;
      store(req, "state", hash("md5").update(Date.now().toString()).digest("hex"));
      url = new Url(provider.url, provider.authorize, {
        response_type: "code",
        client_id: consumer.id,
        redirect_uri: "" + (consumerUrl()) + consumer.routes.connected,
        scope: consumer.scope,
        state: store(req, "state")
      });
      return redirect("CONNECT", res, url);
    });
    app.get(consumer.routes.connected, function(req, res) {
      var code, done, fail, url;
      code = req.query.code;
      if (code) {
        store(req, "code", code);
        url = new Url(provider.url, provider.accessToken, {
          grant_type: "authorization_code",
          code: code,
          redirect_uri: "" + (consumerUrl()) + consumer.routes.connected,
          client_id: consumer.id,
          client_secret: consumer.secret
        });
        done = function(json) {
          storeAuth(req, json);
          return events.connected(req, res);
        };
        fail = function(err) {
          console.error(err.stack);
          return events.error("Failed to connect to OAuth provider during connected callback: " + err, req, res);
        };
        return get("CONNECT", url, done, fail);
      } else if (req.query.error) {
        store(req, "state", null);
        return events.denied(req.query.error, req, res);
      } else {
        return events.error("Invalid connected callback request: OAuth2 code not specified", req, res);
      }
    });
    app.get(consumer.routes.disconnect, function(req, res) {
      var url;
      req.session.destroy();
      url = new Url(provider.url, provider.logout, {
        redirect_uri: "" + (consumerUrl()) + consumer.routes.disconnected
      });
      return redirect("DISCONNECT", res, url);
    });
    app.get(consumer.routes.disconnected, function(req, res) {
      return events.disconnected(req, res);
    });
    return function(req, res, next) {
      return store(req, function() {
        var done, fail, url;
        if (this.authenticated && -(Date.now() - this.expires_time) < (consumer.threshold * 1000)) {
          url = new Url(provider.url, provider.accessToken, {
            grant_type: "refresh_token",
            refresh_token: this.refresh_token,
            scope: consumer.scope
          });
          done = function(json) {
            storeAuth(req, json);
            return next();
          };
          fail = function(err) {
            return events.error("Failed to connect to OAuth provider during refresh: " + err, req, res);
          };
          return get("REFRESH", url, done, fail);
        } else {
          return next();
        }
      });
    };
  };

}).call(this);
